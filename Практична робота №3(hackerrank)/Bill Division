fn bon_appetit(bill: Vec<i32>, k: usize, b: i32) {
    // Calculate the total cost excluding the item Anna didn't eat
    let actual_share: i32 = (bill.iter().sum::<i32>() - bill[k]) / 2;
    
    // Check if the charged amount is equal to the actual share
    if b == actual_share {
        println!("Bon Appetit");
    } else {
        println!("{}", b - actual_share);
    }
}

fn main() {
    let bill = vec![3, 10, 2, 9];
    let k = 1;
    let b = 12;
    bon_appetit(bill, k, b); // Output: 5

    let bill2 = vec![3, 10, 2, 9];
    let k2 = 1;
    let b2 = 7;
    bon_appetit(bill2, k2, b2); // Output: Bon Appetit
}
